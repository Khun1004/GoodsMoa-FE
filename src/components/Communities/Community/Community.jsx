import React, { useEffect, useState } from 'react';
import {
    FaBars,
    FaBell, FaBook, FaCalendarAlt, FaFeatherAlt,
    FaFilm,
    FaGamepad,
    FaPaw,
    FaRegSmile,
    FaStar,
    FaTimes,
    FaTv,
    FaUserAlt
} from 'react-icons/fa';
import CommunityLogoImg from '../../../assets/logo.png';
import CommunityAnimation from '../CommunitySection/CommunityAnimation/CommunityAnimation';
import CommunityDrama from '../CommunitySection/CommunityDrama/CommunityDrama';
import CommunityEvent from '../CommunitySection/CommunityEvent/CommunityEvent';
import CommunityGame from '../CommunitySection/CommunityGame/CommunityGame';
import CommunityIdol from '../CommunitySection/CommunityIdol/CommunityIdol';
import CommunityPureCreation from '../CommunitySection/CommunityPureCreation/CommunityPureCreation';
import RecentBoards from '../CommunitySection/CommunityRecentBoards/CommunityRecentBoards';
import CommunityVideo from '../CommunitySection/CommunityVideo/CommunityVideo';
import CommunityWebNovel from '../CommunitySection/CommunityWebNovel/CommunityWebNovel';
import CommunityWebtoon from '../CommunitySection/CommunityWebtoon/CommunityWebtoon';
import './Community.css';

const boardList = [
    { name: 'ÏµúÍ∑º Î∞©Î¨∏ Í≤åÏãúÌåê', icon: <FaStar style={{ color: '#FFD700' }} /> },
    { name: 'ÏïÑÏù¥Îèå / Ïó∞ÏòàÏù∏', icon: <FaUserAlt style={{ color: '#FF69B4' }} /> },
    { name: 'Í≤åÏûÑ', icon: <FaGamepad style={{ color: '#8A2BE2' }} /> },
    { name: 'ÏòÅÌôî', icon: <FaFilm style={{ color: '#4682B4' }} /> },
    { name: 'ÏõπÏÜåÏÑ§', icon: <FaBook style={{ color: '#32CD32' }} /> },
    { name: 'Ïï†ÎãàÎ©îÏù¥ÏÖò', icon: <FaPaw style={{ color: '#FF8C00' }} /> },
    { name: 'ÏàúÏàòÏ∞ΩÏûë', icon: <FaFeatherAlt style={{ color: '#DC143C' }} /> },
    { name: 'ÌñâÏÇ¨', icon: <FaCalendarAlt style={{ color: '#20B2AA' }} /> },
    { name: 'ÎìúÎùºÎßà', icon: <FaTv style={{ color: '#9370DB' }} /> },
    { name: 'ÏõπÌà∞', icon: <FaRegSmile style={{ color: '#00BFFF' }} /> },
];

const popularPosts = [
    {
        title: 'Î∞òÎã§Ïù¥Ïùò Ìá¥Î¨ºÏù¥ Î∞©ÏßÄ ÎåÄÏ±Ö',
        category: 'ÏõπÏÜåÏÑ§',
        time: '1ÏãúÍ∞Ñ Ï†Ñ',
        likes: 36,
        thumbnail: 'https://via.placeholder.com/80',
    },
    {
        title: 'ÎÇ®Îèå Ïã†Ï≤≠ÏÑ± Í∑ºÌô©ÏûÑ',
        category: 'Í≤åÏûÑ',
        time: '3ÏãúÍ∞Ñ Ï†Ñ',
        likes: 40,
        thumbnail: 'https://via.placeholder.com/80',
    },
    {
        title: 'Î∞ïÌö®Ïã† HERO Î∞úÎß§ ost from ÏÜåÎ∞©Í¥Ä',
        category: 'ÏïÑÏù¥Îèå/Ïó∞ÏòàÏù∏',
        time: '8ÏãúÍ∞Ñ Ï†Ñ',
        likes: 20,
        thumbnail: 'https://via.placeholder.com/80',
    },
    {
        title: '"Í∏∞Ïπ¥ÏûêÎìú! Îãà Îî∏Îî∞Î°ú Î≥ëÏõêÏóê Îã§ÎÖÄÏò§Í∏∏ ÏûòÌñàÏñ¥!"',
        category: 'ÏïÑÏù¥Îèå/Ïó∞ÏòàÏù∏',
        time: '9ÏãúÍ∞Ñ Ï†Ñ',
        likes: 17,
        thumbnail: 'https://via.placeholder.com/80',
    },
    {
        title: 'Ï†ú 82Ìöå Í≥®Îì† Í∏ÄÎ°úÎ∏å ÏàòÏÉÅÏûë ÌíÄ Î¶¨Ïä§Ìä∏',
        category: 'ÏòÅÌôî',
        time: '10ÏãúÍ∞Ñ Ï†Ñ',
        likes: 52,
        thumbnail: 'https://via.placeholder.com/80',
    },
];

const Community = () => {
    const [selectedBoard, setSelectedBoard] = useState('');
    const [searchTerm, setSearchTerm] = useState('');
    const [notifications, setNotifications] = useState([]);
    const [showNotifications, setShowNotifications] = useState(false);
    const [showMobileMenu, setShowMobileMenu] = useState(false);
    const [isMobile, setIsMobile] = useState(window.innerWidth <= 767);

    useEffect(() => {
        // In a real app, this would be an API call
        const mockNotifications = [
            { id: 1, message: 'ÏÉàÎ°úÏö¥ Ï™ΩÏßÄÍ∞Ä ÎèÑÏ∞©ÌñàÏäµÎãàÎã§', time: '5Î∂Ñ Ï†Ñ', read: false },
            { id: 2, message: 'ÌöåÏõêÎãòÏùò Í≤åÏãúÍ∏ÄÏóê ÎåìÍ∏ÄÏù¥ Îã¨Î†∏ÏäµÎãàÎã§', time: '30Î∂Ñ Ï†Ñ', read: false },
            { id: 3, message: 'ÏãúÏä§ÌÖú Ï†êÍ≤Ä ÏïàÎÇ¥', time: '2ÏãúÍ∞Ñ Ï†Ñ', read: true },
        ];
        setNotifications(mockNotifications);

        const handleResize = () => {
            setIsMobile(window.innerWidth <= 767);
        };

        window.addEventListener('resize', handleResize);
        return () => window.removeEventListener('resize', handleResize);
    }, []);

    const handleBoardClick = (name) => {
        setSelectedBoard(name);
        if (isMobile) {
            setShowMobileMenu(false);
        }
    };

    const handleLogoClick = () => {
        setSelectedBoard('Ïù∏Í∏∞Í∏Ä');
    };

    const handleSearch = () => {
        const match = boardList.find(board => board.name.replace(/\s/g, '') === searchTerm.replace(/\s/g, ''));
        if (match) {
            setSelectedBoard(match.name);
        } else {
            setSelectedBoard('Ïù∏Í∏∞Í∏Ä');
        }
    };

    const handleKeyDown = (e) => {
        if (e.key === 'Enter') {
            handleSearch();
        }
    };

    const markNotificationAsRead = (id) => {
        setNotifications(notifications.map(notification => 
            notification.id === id ? { ...notification, read: true } : notification
        ));
    };

    return (
        <div className='container'>
            <div className="community">
                <div className="community-header">
                    <img
                        src={CommunityLogoImg}
                        alt="CommunityLogoImg"
                        className="community-logo"
                        onClick={handleLogoClick}
                    />
                    <div className="communitySearch-bar">
                        <select>
                            <option>Ï†úÎ™©</option>
                        </select>
                        <input
                            type="text"
                            placeholder="Ï†ÑÏ≤¥ Ïª§ÎÆ§ÎãàÌã∞ ÎÇ¥ÏóêÏÑú Í≤ÄÏÉâ"
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            onKeyDown={handleKeyDown}
                        />
                        <button className="communitySearch-button" onClick={handleSearch}>üîç</button>
                    </div>
                    <div className="community-actions">
                        <button 
                            className="notification-button"
                            onClick={() => setShowNotifications(!showNotifications)}
                        >
                            <FaBell />
                            {notifications.some(n => !n.read) && <span className="notification-badge"></span>}
                        </button>
                        {isMobile && (
                            <button 
                                className="mobile-menu-button"
                                onClick={() => setShowMobileMenu(!showMobileMenu)}
                            >
                                {showMobileMenu ? <FaTimes /> : <FaBars />}
                            </button>
                        )}
                    </div>
                </div>

                {showNotifications && (
                    <div className="notification-dropdown">
                        <h3>ÏïåÎ¶º</h3>
                        <ul>
                            {notifications.map(notification => (
                                <li 
                                    key={notification.id} 
                                    className={notification.read ? 'read' : 'unread'}
                                    onClick={() => markNotificationAsRead(notification.id)}
                                >
                                    <div className="notification-message">{notification.message}</div>
                                    <div className="notification-time">{notification.time}</div>
                                </li>
                            ))}
                        </ul>
                    </div>
                )}

                {/* Mobile Menu */}
                {isMobile && showMobileMenu && (
                    <>
                        <div className="mobile-menu-overlay" onClick={() => setShowMobileMenu(false)} />
                        <div className="mobile-menu">
                            {boardList.map((board, index) => (
                                <button
                                    key={index}
                                    className={`mobile-menu-item ${selectedBoard === board.name ? 'active' : ''}`}
                                    onClick={() => handleBoardClick(board.name)}
                                >
                                    <span className="commuity-icon">{board.icon}</span>
                                    {board.name}
                                </button>
                            ))}
                        </div>
                    </>
                )}

                {/* Desktop Menu */}
                {!isMobile && (
                    <div className="board-list-wrapper-horizontal">
                        {boardList.map((board, index) => (
                            <button
                                key={index}
                                className={`board-button-horizontal ${selectedBoard === board.name ? 'active' : ''}`}
                                onClick={() => handleBoardClick(board.name)}
                            >
                                <span className="commuity-icon">{board.icon}</span>
                                {board.name}
                            </button>
                        ))}
                    </div>
                )}

                <div className='commuityCategorMain'>
                    <div className="category-header">
                        <p className='categoryName'>{selectedBoard && selectedBoard}</p>
                        <p className='category-label'>Ïπ¥ÌÖåÍ≥†Î¶¨</p>
                    </div>
                    <p className='line'></p>
                </div>

                {/* ÏÑ†ÌÉùÎêú Í≤åÏãúÌåê Î†åÎçîÎßÅ */}
                <div className="board-content-container">
                    <div className="category-content">
                        {selectedBoard === 'ÏµúÍ∑º Î∞©Î¨∏ Í≤åÏãúÌåê' ? (
                        <RecentBoards />
                        ) : selectedBoard === 'ÏïÑÏù¥Îèå / Ïó∞ÏòàÏù∏' ? (
                        <CommunityIdol />
                        ) : selectedBoard === 'Í≤åÏûÑ' ? (
                        <CommunityGame />
                        ) : selectedBoard === 'ÏòÅÌôî' ? (
                        <CommunityVideo />
                        ) : selectedBoard === 'ÏõπÏÜåÏÑ§' ? (
                        <CommunityWebNovel />
                        ) : selectedBoard === 'Ïï†ÎãàÎ©îÏù¥ÏÖò' ? (
                        <CommunityAnimation />
                        ) : selectedBoard === 'ÏàúÏàòÏ∞ΩÏûë' ? (
                        <CommunityPureCreation />
                        ) : selectedBoard === 'ÌñâÏÇ¨' ? (
                        <CommunityEvent />
                        ) : selectedBoard === 'ÎìúÎùºÎßà' ? (
                        <CommunityDrama />
                        ) : selectedBoard === 'ÏõπÌà∞' ? (
                        <CommunityWebtoon />
                        ) : (
                        <div className="popular-posts">
                            <h2 className='communityPopularTitle'>Ïù∏Í∏∞Í∏Ä</h2>
                            <ul>
                            {popularPosts.map((post, index) => (
                                <li key={index} className="post-item">
                                <div className="post-text">
                                    <strong>{post.title}</strong>
                                    <div className="post-meta">
                                    <span>{post.category}</span> ¬∑ <span>{post.time}</span> ¬∑ <span>Ï∂îÏ≤ú {post.likes}</span>
                                    </div>
                                </div>
                                <img src={post.thumbnail} alt="Ïç∏ÎÑ§Ïùº" className="thumbnail" />
                                </li>
                            ))}
                            </ul>
                        </div>
                        )}
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Community;